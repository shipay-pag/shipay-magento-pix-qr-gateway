<?php

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2024 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 */
namespace Shipay\PixQrGateway\Gateway\Http;

use Magento\Framework\Exception\LocalizedException;
use Psr\Log\LoggerInterface;
use Magento\Framework\Serialize\SerializerInterface;

abstract class Transactions
{
    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @var TokenGenerator
     */
    protected $tokenGenerator;

    /**
     * @var UrlResolver
     */
    protected $urlResolver;

    /**
     * @var string
     */
    protected $token;

    /**
     * @var SerializerInterface
     */
    protected $serializer;

    /**
     * GetPixTransaction constructor.
     * @param LoggerInterface $logger
     * @param TokenGenerator $tokenGenerator
     * @param UrlResolver $urlResolver
     * @param SerializerInterface $serializer
     */
    public function __construct(
        LoggerInterface $logger,
        TokenGenerator $tokenGenerator,
        UrlResolver $urlResolver,
        SerializerInterface $serializer
    ) {
        $this->logger = $logger;
        $this->tokenGenerator = $tokenGenerator;
        $this->urlResolver = $urlResolver;
        $this->serializer = $serializer;
    }

    /**
     * @param $channel
     * @return bool
     * @throws \Exception
     */
    public function requestShipay($channel)
    {
        $result = false;

        try {
            // phpcs:disable

            curl_setopt($channel, CURLOPT_CUSTOMREQUEST, 'GET');
            curl_setopt($channel, CURLOPT_RETURNTRANSFER, true);

            curl_setopt($channel, CURLOPT_HTTPHEADER, $this->getGatewayHeaders());

            $response = curl_exec($channel);

            curl_close($channel);

            if ($response !== false) {
                return $this->serializer->unserialize($response);
            }
        } catch (\Exception $exception) {
            $this->logger->critical($exception);
            throw $exception;
        }
        // phpcs:enable

        return $result;
    }

    /**
     * @return array
     * @throws LocalizedException
     */
    public function getGatewayHeaders()
    {
        return [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $this->getToken(),
        ];
    }

    /**
     * @throws LocalizedException
     */
    public function getToken()
    {
        if ($this->token === null) {
            $this->token = $this->tokenGenerator->issueToken();
        }

        return $this->token;
    }
}
