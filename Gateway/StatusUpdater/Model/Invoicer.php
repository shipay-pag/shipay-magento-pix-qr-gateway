<?php

declare(strict_types=1);

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2021 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 *
 * See LICENSE for license details.
 */

namespace Shipay\PixQrGateway\Gateway\StatusUpdater\Model;

use Magento\Sales\Model\Order;
use Magento\Sales\Model\Order\Invoice;
use Magento\Sales\Model\Service\InvoiceService;
use Magento\Sales\Api\OrderRepositoryInterface;
use Psr\Log\LoggerInterface;
use Magento\Sales\Api\InvoiceRepositoryInterface;

class Invoicer
{
    /**
     * @var InvoiceService
     */
    private $invoiceService;

    /**
     * @var OrderRepositoryInterface
     */
    private $orderRepository;

    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * @var InvoiceRepositoryInterface
     */
    private $invoiceRepository;

    /**
     * Invoicer constructor.
     * @param InvoiceService $invoiceService
     * @param OrderRepositoryInterface $orderRepository
     * @param InvoiceRepositoryInterface $invoiceRepository
     * @param LoggerInterface $logger
     */
    public function __construct(
        InvoiceService $invoiceService,
        OrderRepositoryInterface $orderRepository,
        InvoiceRepositoryInterface $invoiceRepository,
        LoggerInterface $logger
    ) {
        $this->invoiceService = $invoiceService;
        $this->orderRepository = $orderRepository;
        $this->invoiceRepository = $invoiceRepository;
        $this->logger = $logger;
    }

    /**
     * @param int $orderId
     * @return bool|int
     */
    public function invoice($orderId)
    {
        try {
            /** @var Order $order */
            $order = $this->orderRepository->get($orderId);

            if (!$order->canInvoice()) {
                return false;
            }

            /** @var Invoice $invoice */
            $invoice = $this->invoiceService->prepareInvoice($order);
            $invoice->setData("requested_capture_case", Invoice::CAPTURE_OFFLINE);
            $invoice->register();
            $invoice->setTransactionId($order->getPayment()->getLastTransId());
            $this->invoiceRepository->save($invoice);

            $order->addStatusToHistory(
                Order::STATE_PROCESSING,
                __('The payment transaction was paid.'),
                false
            );

            $this->orderRepository->save($order);
        } catch (\Exception $e) {
            $this->logger
                ->critical(
                    "Error in " . __CLASS__ . "::" . __METHOD__ . " --> line " . __LINE__ . "\n" . $e->getMessage()
                );
        }

        return $orderId;
    }
}
