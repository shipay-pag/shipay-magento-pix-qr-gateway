<?php

declare(strict_types=1);

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2021 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 */

namespace Shipay\PixQrGateway\Gateway\Http;

use Magento\Framework\Exception\LocalizedException;
use Magento\Payment\Gateway\Http\ClientInterface;
use Magento\Payment\Gateway\Http\ConverterException;
use Magento\Payment\Gateway\Http\ConverterInterface;
use Magento\Payment\Gateway\Http\TransferInterface;
use Magento\Payment\Model\Method\Logger;
use Psr\Log\LoggerInterface;

class Client implements ClientInterface
{
    /**
     * @var Logger
     */
    private $logger;

    /**
     * @var ConverterInterface
     */
    private $converter;

    /**
     * @var LoggerInterface
     */
    private $loggerCritical;

    /**
     * @var TokenGenerator
     */
    private $tokenGenerator;

    /**
     * Client constructor.
     * @param Logger $logger
     * @param LoggerInterface $loggerCritical
     * @param TokenGenerator $tokenGenerator
     * @param ConverterInterface|null $converter
     */
    public function __construct(
        Logger $logger,
        LoggerInterface $loggerCritical,
        TokenGenerator $tokenGenerator,
        ConverterInterface $converter = null
    ) {
        $this->logger = $logger;
        $this->loggerCritical = $loggerCritical;
        $this->converter = $converter;
        $this->tokenGenerator = $tokenGenerator;
    }

    /**
     * @param TransferInterface $transferObject
     * @return array
     * @throws ConverterException
     */
    public function placeRequest(TransferInterface $transferObject)
    {
        $log = [
            'request_uri' => $transferObject->getUri(),
            'request' => $this->converter
                ? $this->converter->convert($transferObject->getBody())
                : [$transferObject->getBody()]
        ];

        $result = [];

        try {
            // phpcs:disable
            $channel = curl_init($transferObject->getUri());

            curl_setopt($channel, CURLOPT_CUSTOMREQUEST, $transferObject->getMethod());
            curl_setopt($channel, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($channel, CURLOPT_HTTPHEADER, $this->getGatewayHeaders());
            if ($transferObject->getMethod() != "GET") {
                curl_setopt($channel, CURLOPT_POSTFIELDS, $transferObject->getBody());
            }
            $response = curl_exec($channel);

            curl_close($channel);

            $result = $this->converter ? $this->converter->convert($response) : [$response];

            $log['response'] = $result;
        } catch (ConverterException $exception) {
            $this->loggerCritical->critical($exception);
            throw $exception;
        } catch (\Exception $exception) {
            $this->loggerCritical->critical($exception);
            throw $exception;
        } finally {
            $this->logger->debug($log);
        }
        // phpcs:enable

        return $result;
    }

    /**
     * @return array
     * @throws LocalizedException
     */
    public function getGatewayHeaders()
    {
        return [
            'Content-Type: application/json',
            'x-shipay-order-type: e-order',
            'Authorization: Bearer ' . $this->tokenGenerator->issueToken(),
        ];
    }
}
